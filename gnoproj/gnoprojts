#!/bin/bash                                                                     
#    gnoprojts: run gnoproj chain in a docker container for given timestamp
#    Copyright (C) 2017 ALSENET.COM  http://www.alsenet.com
#
#    Author: Rurik Bugdanov <rurik.bugdanov@alsenet.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

set -e
shopt -s extglob

usage() {
cat 1>&2 << EOF
  
NAME $(basename $0) - imagej-elphel tiles rectilinear reprojection
  
SYNOPSIS
  $(basename $0) -c <path> -i <path_or_filelist> -t <timestamp> -o <path>
 
  -c|--camera <path>                    The camera data dir

  -i|--input <path_or_filelist>         The imagej-elphel tiles directory,
                                        or a text file containing the
																				tile paths.

  -t|--timestamp <timestamp>            The timestamp to process

  -o|--output-dir <path>                The output directory
  
DESCRIPTION
  A command list is generated for every tiles from the specified input 
  filelist or directory that match the given timestamp.
	  
  Then the command list is run using parallel in a docker container
	which must be able to run convert and gnoproj.
  
  The timestamp may be partial, in order to process many timestamps in the
  same docker container instance.
	  
  For each individual timestamp the half tiles (if any) are merged into one
	tiff then normalized and converted to 8bits per channel if necessary as
	required by gnoproj. Finally each tiff is subject to a rectilinear
	reprojection using gnoproj.

EOF
  exit 1
} 

  # parse command line options
  if ! options=$(getopt -o hc:i:t:o: -l help,camera:,input:,timestamp:,output-dir: -- "$@")
  then
      # something went wrong, getopt will put out an error message for us
      exit 1
  fi
 
  eval set -- "$options"
 
  FILELIST=/dev/stdin
 
  while [ $# -gt 0 ] ; do
      case $1 in
      -h|--help) usage ;;
      -c|--camera) CAMERADIR="$2" ; shift ;;
      -i|--input) INPUT="$2" ; shift ;;
      -t|--timestamp) TIMESTAMP="$2" ; shift ;;
      -o|--output-dir) OUTPUTDIR="$2" ; shift ;;
      (--) shift; break ;;
      (-*) echo "$(basename $0): ERROR: unrecognized option $1" 1>&2; usage ;;
      esac
      shift
  done
 
  [ $# -gt 0 ] && echo "$(basename $0): ERROR: unrecognized option: $1" 1>&2 && usage
 
[ -d "$CAMERADIR" ] || usage
[ -d "$INPUT" ] || [ -f "$INPUT" ] ||usage
[ -d "$OUTPUTDIR" ] || usage
[ -n "$TIMESTAMP" ] || usage

echo $(date +%Y-%m-%d@%T) $(basename $0) processing: $TIMESTAMP

# get camera mac address from $CAMERADIR
MACADDR=$(sed -r -n -e 's/.*([-0-9a-f]{17}).*/\1/p' <<< $CAMERADIR)
if [ -z "$MACADDR" ] ; then
  echo error: camera mac address not found in \"$CAMERADIR\"
  exit 1
fi

# create temporary directory
TMPDIR=$(mktemp -d)
[ -z "$DEBUG" ] && trap "rm -rf $TMPDIR" SIGINT SIGKILL SIGTERM SIGHUP SIGQUIT EXIT

# create TILELIST for TIMESTAMP in the given INPUT file list or directory
TILELIST=$(mktemp --tmpdir=$TMPDIR)
if [ -d "$INPUT" ] ; then
  find $INPUT -name '$TIMESTAMP*' > $TILELIST
else
  grep -e "$TIMESTAMP" $INPUT > $TILELIST
fi

export TILELIST TMPDIR MACADDR OUTPUTDIR

# for the given tiff, enqueue commands to normalize and reproject image in commands.q.txt
enqueue() {
  TIFF=${1?"enqueue: filename required"}

  # we need to reset extglob since parallel forked
  shopt -s extglob

  BASENAME=$(basename $TIFF)

  # normalize colors and convert to 8 bits per channel, if needed
  if [[ ! "$BASENAME" =~ RGB24 ]] ; then

    if [[ "$BASENAME" =~ INT16 ]] ; then
      LEVELS="-level 0%,25%,1"
    else
      echo ERROR: cannot determine normalization parameters for $BASENAME
      exit 1
    fi

    TIFF24=$TMPDIR/${BASENAME/+([A-Z0-9])_EQR/RGB24_EQR}

    if grep -q $TIFF24 $TILELIST ; then 
      # already normalized
      echo "WARNING: tile already converted to 8 bits: ${BASENAME}"

    else
      # the following command must be on the same line than the other commands queued for this timestamp (because of parallel), hence -n and &&
      echo -n convert $TIFF $LEVELS -depth 8 $TIFF24 "&& " >> $TMPDIR/commands.q.txt
    fi
    TIFF=$TIFF24
  fi

  # enqueue command for reprojection
  echo gnoproj -i $TIFF -m $MACADDR -d /data -o $OUTPUTDIR/ >> $TMPDIR/commands.q.txt
}
export -f enqueue

# add commands to commands.q.txt for joining and processing the half tiles
grep LEFT.tiff $TILELIST | sort -u | while read LEFT ; do 
  BASENAME=$(basename $LEFT -LEFT.tiff)

  if grep -q ${BASENAME}.tiff $TILELIST ; then 
    echo "WARNING: splitted tile already recomposed: ${BASENAME}.tiff"
    continue
  fi
  DIRNAME=$(dirname $LEFT)

  # normalize and convertimage at the same time
  if [[ "$BASENAME" =~ RGB24 ]] ; then
    NORMALIZE=
    DESTNAME="$BASENAME"

  elif [[ "$BASENAME" =~ INT16 ]] ; then
    NORMALIZE="-level 0%,25%,1 -depth 8"
    DESTNAME=${BASENAME/+([A-Z0-9])_EQR/RGB24_EQR}

  else
    echo ERROR: cannot determine if normalization is needed for $BASENAME
    exit 1

  fi

  # the following command must be on the same line than the other commands queued for this timestamp (because of parallel), hence -n and &&
  echo -n convert $LEFT $DIRNAME/${BASENAME}-RIGHT.tiff +append $NORMALIZE $TMPDIR/${DESTNAME}.tiff "&& "  >> $TMPDIR/commands.q.txt

  # add other command(s) on the same line
  enqueue $TMPDIR/${DESTNAME}.tiff

done

# enqueue commands for the remaining tiles in TILELIST
cat $TILELIST | egrep -v -e LEFT -e RIGHT | sort -u | parallel --verbose --ungroup --no-notice -j1 enqueue


# process command queue using parallel into gnoproj docker container
time docker run -i --name gnoproj-$MACADDR-$TIMESTAMP -v /data:/data -v $TMPDIR:$TMPDIR gnoproj parallel --verbose --ungroup --no-notice -j $(nproc) < $TMPDIR/commands.q.txt

